package com.example.iapdemo.common;

import android.app.Activity;
import android.content.Intent;
import android.content.IntentSender;
import android.net.Uri;
import android.text.TextUtils;
import android.util.Log;

import com.example.iapdemo.callback.IsEnvReadyCallback;
import com.example.iapdemo.callback.PurchaseIntentResultCallback;
import com.example.iapdemo.callback.QueryPurchasesCallback;
import com.example.iapdemo.callback.ProductInfoCallback;
import com.huawei.hmf.tasks.OnFailureListener;
import com.huawei.hmf.tasks.OnSuccessListener;
import com.huawei.hmf.tasks.Task;
import com.huawei.hms.iap.IapApiException;
import com.huawei.hms.iap.IapClient;
import com.huawei.hms.iap.entity.ConsumeOwnedPurchaseReq;
import com.huawei.hms.iap.entity.ConsumeOwnedPurchaseResult;
import com.huawei.hms.iap.entity.IsEnvReadyResult;
import com.huawei.hms.iap.entity.OwnedPurchasesReq;
import com.huawei.hms.iap.entity.OwnedPurchasesResult;
import com.huawei.hms.iap.entity.ProductInfoReq;
import com.huawei.hms.iap.entity.ProductInfoResult;
import com.huawei.hms.iap.entity.PurchaseIntentReq;
import com.huawei.hms.iap.entity.PurchaseIntentResult;
import com.huawei.hms.iap.entity.PurchaseIntentWithPriceReq;
import com.huawei.hms.support.api.client.Status;
import com.ivy.util.Logger;

import java.util.List;

/**
 * the tool class of Iap interface
 */
public class IapRequestHelper {
  private static final String TAG = "IapRequestHelper";

  /**
   * Create a PurchaseIntentReq object.
   *
   * @param type      In-app product type.
   *                  The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription
   * @param productId ID of the in-app product to be paid.
   *                  The in-app product ID is the product ID you set during in-app product configuration in AppGallery Connect.
   * @return PurchaseIntentReq
   */
  private static PurchaseIntentReq createPurchaseIntentReq(int type, String developerPayLoad, String productId) {
    PurchaseIntentReq req = new PurchaseIntentReq();
    req.setPriceType(type);
    req.setProductId(productId);
    req.setDeveloperPayload(developerPayLoad);
    return req;
  }

  /**
   * Create a PurchaseIntentWithPriceReq object.
   *
   * @param productId ID of the in-app product to be paid.
   * @return PurchaseIntentWithPriceReq
   */


  /**
   * Create a ConsumeOwnedPurchaseReq object.
   *
   * @param purchaseToken which is generated by the Huawei payment server during product payment and returned to the app through InAppPurchaseData.
   *                      The app transfers this parameter for the Huawei payment server to update the order status and then deliver the in-app product.
   * @return ConsumeOwnedPurchaseReq
   */
  private static ConsumeOwnedPurchaseReq createConsumeOwnedPurchaseReq(String purchaseToken) {
    ConsumeOwnedPurchaseReq req = new ConsumeOwnedPurchaseReq();
    req.setPurchaseToken(purchaseToken);
    req.setDeveloperChallenge("testConsume");
    return req;
  }


  /**
   * Create a OwnedPurchasesReq object.
   *
   * @param type In-app product type.
   *             The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription
   * @return OwnedPurchasesReq
   */
  private static OwnedPurchasesReq createOwnedPurchasesReq(int type, String continuationToken) {
    OwnedPurchasesReq req = new OwnedPurchasesReq();
    req.setPriceType(type);
    req.setContinuationToken(continuationToken);
    return req;
  }

  /**
   * Create a ProductInfoReq object.
   *
   * @param type       In-app product type.
   *                   The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription
   * @param productIds ID list of products to be queried. Each product ID must exist and be unique in the current app.
   * @return
   */
  private static ProductInfoReq createProductInfoReq(int type, List<String> productIds) {
    ProductInfoReq req = new ProductInfoReq();
    req.setPriceType(type);
    req.setProductIds(productIds);
    return req;
  }

  /**
   * To check whether the country or region of the logged in HUAWEI ID is included in the countries or regions supported by HUAWEI IAP.
   *
   * @param mClient  IapClient instance to call the isEnvReady API.
   * @param callback IsEnvReadyCallback Instance.
   */
  public static void isEnvReady(IapClient mClient, final IsEnvReadyCallback callback) {
    Logger.debug(TAG, "call isEnvReady");
    Task<IsEnvReadyResult> task = mClient.isEnvReady();
    task.addOnSuccessListener(new OnSuccessListener<IsEnvReadyResult>() {
      @Override
      public void onSuccess(IsEnvReadyResult result) {
        Logger.debug(TAG, "isEnvReady, success");
        callback.onSuccess();
      }
    }).addOnFailureListener(new OnFailureListener() {
      @Override
      public void onFailure(Exception e) {
        Logger.error(TAG, "isEnvReady, fail", e);
        callback.onFail(e);
      }
    });
  }

  /**
   * obtain in-app product details configured in AppGallery Connect
   *
   * @param productIds ID list of products to be queried.
   *                   Each product ID must exist and be unique in the current app.
   * @param type       In-app product type.
   *                   The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription
   */
  public static void obtainProductInfo(IapClient iapClient, final List<String> productIds, int type, final ProductInfoCallback callback) {
    Logger.debug(TAG, "call obtainProductInfo");

    Task<ProductInfoResult> task = iapClient.obtainProductInfo(createProductInfoReq(type, productIds));
    task.addOnSuccessListener(new OnSuccessListener<ProductInfoResult>() {
      @Override
      public void onSuccess(ProductInfoResult result) {
        Logger.debug(TAG, "obtainProductInfo, success");
        callback.onSuccess(result);
      }
    }).addOnFailureListener(new OnFailureListener() {
      @Override
      public void onFailure(Exception e) {
        Logger.error(TAG, "obtainProductInfo, fail", e);
        callback.onFail(e);
      }
    });
  }

  /**
   * create orders for in-app products in the PMS
   *
   * @param iapClient IapClient instance to call the createPurchaseIntent API.
   * @param productId ID of the in-app product to be paid.
   *                  The in-app product ID is the product ID you set during in-app product configuration in AppGallery Connect.
   * @param type      In-app product type.
   *                  The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription
   */
  public static void createPurchaseIntent(final IapClient iapClient, String productId, int type, String developerPayLoad, final PurchaseIntentResultCallback callback) {
    Logger.debug(TAG, "call createPurchaseIntent");
    Task<PurchaseIntentResult> task = iapClient.createPurchaseIntent(createPurchaseIntentReq(type, developerPayLoad, productId));
    task.addOnSuccessListener(new OnSuccessListener<PurchaseIntentResult>() {
      @Override
      public void onSuccess(PurchaseIntentResult result) {
        Logger.debug(TAG, "createPurchaseIntent, success");
        callback.onSuccess(result);
      }
    }).addOnFailureListener(new OnFailureListener() {
      @Override
      public void onFailure(Exception e) {
        Logger.error(TAG, "createPurchaseIntent, fail", e);
        callback.onFail(e);

      }
    });
  }


  /**
   * to start an activity.
   *
   * @param activity the activity to launch a new page.
   * @param status   This parameter contains the pendingIntent object of the payment page.
   * @param reqCode  Result code.
   */
  public static void startResolutionForResult(Activity activity, Status status, int reqCode) {
    if (status == null) {
      Logger.error(TAG, "status is null");
      return;
    }
    if (status.hasResolution()) {
      try {
        status.startResolutionForResult(activity, reqCode);
      } catch (IntentSender.SendIntentException exp) {
        Logger.error(TAG, "startResolutionForResult exception", exp);
      }
    } else {
      Logger.error(TAG, "intent is null");
    }
  }

  /**
   * query information about all subscribed in-app products, including consumables, non-consumables, and auto-renewable subscriptions.</br>
   * If consumables are returned, the system needs to deliver them and calls the consumeOwnedPurchase API to consume the products.
   * If non-consumables are returned, the in-app products do not need to be consumed.
   * If subscriptions are returned, all existing subscription relationships of the user under the app are returned.
   *
   * @param mClient  IapClient instance to call the obtainOwnedPurchases API.
   * @param type     In-app product type.
   *                 The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription
   * @param callback QueryPurchasesCallback
   */
  public static void obtainOwnedPurchases(IapClient mClient, final int type, final QueryPurchasesCallback callback) {
    Logger.debug(TAG, "call obtainOwnedPurchases");
    String continuationToken = null;
    Task<OwnedPurchasesResult> task = mClient.obtainOwnedPurchases(IapRequestHelper.createOwnedPurchasesReq(type, continuationToken));
    task.addOnSuccessListener(new OnSuccessListener<OwnedPurchasesResult>() {
      @Override
      public void onSuccess(OwnedPurchasesResult result) {
        Logger.debug(TAG, "obtainOwnedPurchases, success");
        callback.onSuccess(result);

      }
    }).addOnFailureListener(new OnFailureListener() {
      @Override
      public void onFailure(Exception e) {
        Logger.error(TAG, "obtainOwnedPurchases, fail", e);
        callback.onFail(e);
      }
    });

  }

  /**
   * obtain the historical consumption information about a consumable in-app product or all subscription receipts of a subscription.
   *
   * @param iapClient         IapClient instance to call the obtainOwnedPurchaseRecord API.
   * @param priceType         In-app product type.
   *                          The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription.
   * @param continuationToken Data locating flag for supporting query in pagination mode.
   * @param callback          QueryPurchasesCallback
   */
  public static void obtainOwnedPurchaseRecord(IapClient iapClient, int priceType, String continuationToken, final QueryPurchasesCallback callback) {
    Logger.debug(TAG, "call obtainOwnedPurchaseRecord");
    Task<OwnedPurchasesResult> task = iapClient.obtainOwnedPurchaseRecord(createOwnedPurchasesReq(priceType, continuationToken));
    task.addOnSuccessListener(new OnSuccessListener<OwnedPurchasesResult>() {
      @Override
      public void onSuccess(OwnedPurchasesResult result) {
        Logger.debug(TAG, "obtainOwnedPurchaseRecord, success");
        callback.onSuccess(result);

      }
    }).addOnFailureListener(new OnFailureListener() {
      @Override
      public void onFailure(Exception e) {
        Logger.error(TAG, "obtainOwnedPurchaseRecord, fail", e);
        callback.onFail(e);
      }
    });
  }

  /**
   * Consume all the unconsumed purchases with priceType 0.
   *
   * @param iapClient     IapClient instance to call the consumeOwnedPurchase API.
   * @param purchaseToken which is generated by the Huawei payment server during product payment and returned to the app through InAppPurchaseData.
   */
  public static void consumeOwnedPurchase(IapClient iapClient, String purchaseToken) {
    Logger.debug(TAG, "call consumeOwnedPurchase");
    Task<ConsumeOwnedPurchaseResult> task = iapClient.consumeOwnedPurchase(createConsumeOwnedPurchaseReq(purchaseToken));
    task.addOnSuccessListener(new OnSuccessListener<ConsumeOwnedPurchaseResult>() {
      @Override
      public void onSuccess(ConsumeOwnedPurchaseResult result) {
        // Consume success.
        Logger.debug(TAG, "consumeOwnedPurchase success");
      }
    }).addOnFailureListener(new OnFailureListener() {
      @Override
      public void onFailure(Exception e) {
        if (e instanceof IapApiException) {
          IapApiException apiException = (IapApiException) e;
          int returnCode = apiException.getStatusCode();
          Logger.error(TAG, "consumeOwnedPurchase fail, IapApiException returnCode: " + returnCode, e);
        } else {
          // Other external errors
          Logger.error(TAG, e.getMessage(), e);
        }
      }
    });

  }

  /**
   * link to subscription manager page
   *
   * @param activity    activity
   * @param packageName your packageName
   * @param appId       the appId you can find in config.json
   * @param productId   the productId of the subscription product
   */
  public static void showSubscription(Activity activity, String packageName, String appId, String productId) {
    if (null == activity || TextUtils.isEmpty(packageName) || TextUtils.isEmpty(appId)) {
      Log.e(TAG, "showSubscription, param error");
      return;
    }

    if (TextUtils.isEmpty(productId)) {
      productId = "";
    }

    Intent intent = new Intent(Intent.ACTION_VIEW);
    Uri uri = Uri.parse("pay://com.huawei.hwid.external/subscriptions")
      .buildUpon()
      .appendQueryParameter("package", packageName)
      .appendQueryParameter("appid", appId)
      .appendQueryParameter("sku", productId)
      .build();
    intent.setData(uri);
    activity.startActivity(intent);
  }
}
